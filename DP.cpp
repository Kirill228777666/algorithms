#include <bits/stdc++.h>
using namespace std;


/*
Принцип Динамического Программирования:
1. Определить исходную задачу и разбить её на подзадачи
2. Решить каждую подзадачу один раз, сохраняя результаты
3. Использовать сохраненные результаты для решения исходной задачи

Общая реализация ДП обычно включает:
- Инициализацию базовых случаев (начальные условия)
- Использование цикла для последовательного вычисления значений
- Сохранение и переиспользование промежуточных решений
*/


// Задача №1: Подсчёт чисел Фибоначчи
// Дано целое число n. Найти n-е число Фибоначчи.
int fibonacci(int n) {
    if (n <= 1) return n;

    vector<int> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;

    for (int i = 2; i <= n; ++i)
        fib[i] = fib[i - 1] + fib[i - 2];

    return fib[n];
}

// Задача №2: Подсчёт количества способов подняться по лестнице
// Дано целое число n, обозначающее количество ступенек. Каждый раз можно подниматься на 1 или 2 ступеньки
int climbStairs(int n) {
    vector<int> ways(n + 1);
    ways[0] = 1;
    ways[1] = 1;

    for (int i = 2; i <= n; ++i)
        ways[i] = ways[i - 1] + ways[i - 2];

    return ways[n];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n1, n2;
    cin >> n1 >> n2;

    // Решение задачи №1
    cout << "Fibonacci(" << n1 << ") = " << fibonacci(n1) << endl;

    // Решение задачи №2
    cout << "Ways to climb stairs with " << n2 << " steps: " << climbStairs(n2) << endl;
}
